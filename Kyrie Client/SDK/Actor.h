#pragma once
#include <string>
#include <vector>
#include <memory>
#include "../Utils/Utils.h"

#include "../Memory/Memory.h"
#include "../Utils/Math.h"
#include "EntityContext.h"
#include "Components/RenderPositionComponent.h"
#include "Level.h"
#include "GameMode.h"

class EntityRotation {
public:
	Vec2<float> rotPrev;
	Vec2<float> rot;
};

enum ActorFlags;
class Mob;
class Player;
class HashedString;
class ActorDamageSource;
class Packet;
enum InputMode;
enum NewInteractionModel;
enum UIProfanityContext;
enum MaterialType;
class IConstBlockSource;
class ActorDamageCause;
class ActorUniqueID;
class Block;
class ActorEvent;
class ItemStack;
enum ArmorSlot;
enum EquipmentSlot;
class CompoundTag;
class DataLoadHelper;
class ActorLink;
class ChangeDimensionPacket;
class Attribute;
class MobEffectInstance;
enum ItemUseMethod;
class ItemStackBase;
class ActorInteraction;
class Options;
class EquipmentTableDefinition;
class EntityContext;
enum HandSlot;
class RenderParams;
class AnimationComponent;
enum AnimationComponentGroupType;

class Actor {
public:
	BUILD_ACCESS(this, EntityContext, entityContext, 0x8);
	BUILD_ACCESS(this, Level*, level, 0x260);
	BUILD_ACCESS(this, EntityRotation*, rotation, 0x2B0);
	BUILD_ACCESS(this, GameMode*, gameMode, 0x0E70);
public:
	RenderPositionComponent* getRenderPositionComponent() {
		using getRenderPositionComponent = RenderPositionComponent*(__fastcall*)(__int64, EntityId*);
		static getRenderPositionComponent func = reinterpret_cast<getRenderPositionComponent>(Memory::getBase() + 0x2F06A70); //("40 53 48 83 EC ? 48 8B DA BA 6E F3 E8 D4");
		__int64 registryBase = (__int64)(*reinterpret_cast<void**>(this->entityContext.registry));
		EntityId id = this->entityContext.id;
		return func(registryBase, &id);
	}
public:
	virtual __int64 getStatusFlag(ActorFlags);
	virtual void setStatusFlag(ActorFlags, bool);
	virtual Mob* getLastHurtByMob(void);
	virtual void setLastHurtByMob(Mob*);
	virtual Player* getLastHurtByPlayer(void);
	virtual void setLastHurtByPlayer(Player*);
	virtual Actor* getLastHurtMob(void);
	virtual void setLastHurtMob(Actor*);
	virtual __int64 outOfWorld(void);
	virtual void reloadHardcoded(__int64, __int64 const&);
	virtual void reloadHardcodedClient(__int64, __int64 const&);
	virtual void initializeComponents(__int64, __int64 const&);
	virtual void reloadComponents(__int64, __int64 const&);
	virtual void _serverInitItemStackIds(void);
	virtual __int64 _doInitialMove(void);
	virtual __int64 hasComponent(HashedString const&);
	virtual ~Actor(); // Destructor()
	virtual void resetUserPos(bool);
	virtual __int64 getOwnerEntityType(void);
	virtual void remove(void);
	virtual bool isRuntimePredictedMovementEnabled(void);
	virtual __int64 getPredictedMovementValues(void);
	virtual Vec3<float>* getPosition(void);
	virtual Vec3<float>* getPosPrev(void);
	virtual __int64 getPosExtrapolated(float);
	virtual __int64 getFiringPos(void);
	virtual __int64 getInterpolatedRidingPosition(float);
	virtual __int64 getInterpolatedBodyRot(float);
	virtual __int64 getInterpolatedHeadRot(float);
	virtual __int64 getInterpolatedBodyYaw(float);
	virtual __int64 getYawSpeedInDegreesPerSecond(void);
	virtual __int64 getInterpolatedWalkAnimSpeed(float);
	virtual __int64 getInterpolatedRidingOffset(float, int);
	virtual __int64 resetInterpolated(void);
	virtual bool isFireImmune(void);
	virtual __int64 breaksFallingBlocks(void);
	virtual __int64 blockedByShield(ActorDamageSource const&, Actor&);
	virtual bool canDisableShield(void);
	virtual void teleportTo(Vec3<float> const&, bool, int, int, bool);
	virtual void tryTeleportTo(Vec3<float> const&, bool, bool, int, int);
	virtual void chorusFruitTeleport(Vec3<float> const&);
	virtual __int64 lerpMotion(Vec3<float> const&);
	virtual void tryCreateAddActorPacket(void);
	virtual __int64 normalTick(void);
	virtual __int64 baseTick(void);
	virtual __int64 passengerTick(void);
	virtual void startRiding(Actor&);
	virtual void addPassenger(Actor&);
	virtual __int64 getExitTip(std::string const&, InputMode, NewInteractionModel);
	virtual std::string& getEntityLocNameString(void);
	virtual __int64 intersects(Vec3<float> const&, Vec3<float> const&);
	virtual bool isInWall(void);
	virtual bool isInvisible(void);
	virtual bool canShowNameTag(void);
	virtual bool canExistInPeaceful(void);
	virtual void setNameTagVisible(bool);
	virtual std::string& getNameTag(void);
	virtual __int64 getNameTagAsHash(void);
	virtual __int64 getFormattedNameTag(void);
	virtual void filterFormattedNameTag(UIProfanityContext const&);
	virtual void setNameTag(std::string const&);
	virtual __int64 getAlwaysShowNameTag(void);
	virtual void setScoreTag(std::string const&);
	virtual std::string& getScoreTag(void);
	virtual bool isInWater(void);
	virtual bool isUnderLiquid(MaterialType);
	virtual bool isOverWater(void);
	virtual __int64 getShadowHeightOffs(void);
	virtual __int64 getShadowRadius(void);
	virtual __int64 getHeadLookVector(float);
	virtual bool canSeeInvisible(void);
	virtual bool canSee(Actor const&);
	virtual bool canSee(Vec3<float> const&);
	virtual bool canInteractWithOtherEntitiesInGame(void);
	virtual bool isSkyLit(float);
	virtual __int64 getBrightness(float, IConstBlockSource const&);
	virtual __int64 interactPreventDefault(void);
	virtual __int64 playerTouch(Player&);
	virtual bool isImmobile(void);
	virtual bool isSilent(void);
	virtual bool isSilentObserver(void);
	virtual bool isPickable(void);
	virtual bool isFishable(void);
	virtual bool isSleeping(void);
	virtual void setSleeping(bool);
	virtual bool isShootable(void);
	virtual void setSneaking(bool);
	virtual bool isBlocking(void);
	virtual bool isDamageBlocked(ActorDamageSource const&);
	virtual bool isAlive(void);
	virtual bool isOnFire(void);
	virtual bool isOnHotBlock(void);
	virtual bool isCreativeModeAllowed(void);
	virtual bool isSurfaceMob(void);
	virtual bool isTargetable(void);
	virtual bool isLocalPlayer(void);
	virtual bool isRemotePlayer(void);
	virtual bool isPlayer(void);
	virtual bool isAffectedByWaterBottle(void);
	virtual bool canAttack(Actor*, bool);
	virtual void setTarget(Actor*);
	virtual bool isValidTarget(Actor*);
	virtual void attack(Actor&, ActorDamageCause const&);
	virtual void performRangedAttack(Actor&, float);
	virtual int getEquipmentCount(void);
	virtual void setOwner(ActorUniqueID);
	virtual void setSitting(bool);
	virtual __int64 onTame(void);
	virtual __int64 onFailedTame(void);
	virtual __int64 getInventorySize(void);
	virtual __int64 getEquipSlots(void);
	virtual __int64 getChestSlots(void);
	virtual void setStanding(bool);
	virtual bool canPowerJump(void);
	virtual void setCanPowerJump(bool);
	virtual bool isEnchanted(void);
	virtual __int64 shouldRender(void);
	virtual void playAmbientSound(void);
	virtual __int64 getAmbientSound(void);
	virtual bool isInvulnerableTo(ActorDamageSource const&);
	virtual __int64 getBlockDamageCause(Block const&);
	virtual __int64 doFireHurt(int);
	virtual __int64 onLightningHit(void);
	virtual void onBounceStarted(Vec3<int> const&, Block const&);
	virtual void feed(int);
	virtual void handleEntityEvent(ActorEvent, int);
	virtual __int64 getPickRadius(void);
	virtual __int64 getActorRendererId(void);
	virtual __int64 spawnAtLocation(int, int);
	virtual __int64 spawnAtLocation(int, int, float);
	virtual __int64 spawnAtLocation(ItemStack const&, float);
	virtual void despawn(void);
	virtual void killed(Actor&);
	virtual __int64 awardKillScore(Actor&, int);
	virtual void setArmor(ArmorSlot, ItemStack const&);
	virtual __int64 getArmor(ArmorSlot);
	virtual __int64 getAllArmor(void);
	virtual __int64 getArmorMaterialTypeInSlot(ArmorSlot);
	virtual __int64 getArmorMaterialTextureTypeInSlot(ArmorSlot);
	virtual __int64 getArmorColorInSlot(ArmorSlot, int);
	virtual __int64 getEquippedSlot(EquipmentSlot);
	virtual void setEquippedSlot(EquipmentSlot, ItemStack const&);
	virtual void setCarriedItem(ItemStack const&);
	virtual __int64 getCarriedItem(void);
	virtual void setOffhandSlot(ItemStack const&);
	virtual __int64 getEquippedTotem(void);
	virtual bool consumeTotem(void);
	virtual void save(CompoundTag&);
	virtual void saveWithoutId(CompoundTag&);
	virtual void load(CompoundTag const&, DataLoadHelper&);
	virtual void loadLinks(CompoundTag const&, std::vector<ActorLink>&, DataLoadHelper&);
	virtual int getEntityTypeId(void);
	virtual __int64 queryEntityRenderer(void);
	virtual __int64 getSourceUniqueID(void);
	virtual __int64 thawFreezeEffect(void);
	virtual bool canFreeze(void);
	virtual bool isWearingLeatherArmor(void);
	virtual __int64 getLiquidAABB(MaterialType);
	virtual __int64 handleInsidePortal(Vec3<int> const&);
	virtual float getPortalCooldown(void);
	virtual float getPortalWaitTime(void);
	virtual bool canChangeDimensionsUsingPortal(void);
	virtual void changeDimension(__int64); // changeDimension(AutomaticID<Dimension,int>)
	virtual void changeDimension(ChangeDimensionPacket const&);
	virtual __int64 getControllingPlayer(void);
	virtual bool checkFallDamage(float, bool);
	virtual void causeFallDamage(float, float, ActorDamageSource);
	virtual void handleFallDistanceOnServer(float, float, bool);
	virtual __int64 onSynchedFlagUpdate(int, long, long);
	virtual __int64 onSynchedDataUpdate(int);
	virtual bool canAddPassenger(Actor&);
	virtual bool canPickupItem(ItemStack const&);
	virtual bool canBePulledIntoVehicle(void);
	virtual bool inCaravan(void);
	virtual bool isLeashableType(void);
	virtual __int64 tickLeash(void);
	virtual void sendMotionPacketIfNeeded(void);
	virtual bool canSynchronizeNewEntity(void);
	virtual __int64 startSwimming(void);
	virtual __int64 stopSwimming(void);
	virtual void buildDebugInfo(std::string&);
	virtual __int64 getCommandPermissionLevel(void);
	virtual bool isClientSide(void);
	virtual __int64 getMutableAttribute(Attribute const&);
	virtual __int64 getAttribute(Attribute const&);
	virtual float getDeathTime(void);
	virtual __int64 heal(int);
	virtual bool isInvertedHealAndHarm(void);
	virtual bool canBeAffected(unsigned int);
	virtual bool canBeAffectedByArrow(MobEffectInstance const&);
	virtual void onEffectAdded(MobEffectInstance&);
	virtual void onEffectUpdated(MobEffectInstance&);
	virtual void onEffectRemoved(MobEffectInstance&);
	virtual bool canObstructSpawningAndBlockPlacement(void);
	virtual __int64 getAnimationComponent(void);
	virtual __int64 openContainerComponent(Player&);
	virtual __int64 swing(void);
	virtual void useItem(ItemStackBase&, ItemUseMethod, bool);
	virtual bool hasOutputSignal(unsigned char);
	virtual __int64 getOutputSignal(void);
	virtual __int64 getDebugText(std::vector<std::string>&);
	virtual __int64 getMapDecorationRotation(void);
	virtual __int64 getPassengerYRotation(Actor const&);
	virtual void add(ItemStack&);
	virtual void drop(ItemStack const&, bool);
	virtual __int64 getInteraction(Player&, ActorInteraction&, Vec3<float> const&);
	virtual bool canDestroyBlock(Block const&);
	virtual void setAuxValue(int);
	virtual void setSize(float, float); // Hitbox <333
	virtual void onOrphan(void);
	virtual __int64 wobble(void);
	virtual bool wasHurt(void);
	virtual __int64 startSpinAttack(void);
	virtual __int64 stopSpinAttack(void);
	virtual void setDamageNearbyMobs(bool);
	virtual __int64 renderDebugServerState(Options const&);
	virtual __int64 reloadLootTable(void);
	virtual __int64 reloadLootTable(EquipmentTableDefinition const&);
	virtual __int64 getDeletionDelayTimeSeconds(void);
	virtual void kill(void);
	virtual void die(ActorDamageSource const&);
	virtual bool shouldDropDeathLoot(void);
	virtual bool shouldTick(void);
	virtual __int64 applySnapshot(EntityContext const&, EntityContext const&);
	virtual __int64 getNextStep(float);
	virtual __int64 getLootTable(void);
	virtual void onPush(Actor&);
	virtual Vec3<float>& getLastDeathPos(void);
	virtual __int64 getLastDeathDimension(void);
	virtual bool hasDiedBefore(void);
	virtual void doWaterSplashEffect(void);
	virtual bool _shouldProvideFeedbackOnHandContainerItemSet(HandSlot, ItemStack const&);
	virtual bool _shouldProvideFeedbackOnArmorSet(ArmorSlot, ItemStack const&);
	virtual void updateEntitySpecificMolangVariables(RenderParams&);
	virtual bool shouldTryMakeStepSound(void);
	virtual bool canMakeStepSound(void);
	virtual void _hurt(ActorDamageSource const&, float, bool, bool);
	virtual __int64 markHurt(void);
	virtual __int64 _getAnimationComponent(std::shared_ptr<AnimationComponent>&, AnimationComponentGroupType);
	virtual void readAdditionalSaveData(CompoundTag const&, DataLoadHelper&);
	virtual void addAdditionalSaveData(CompoundTag&);
	virtual void _playStepSound(Vec3<int> const&, Block const&);
	virtual void _playFlySound(Vec3<int> const&, Block const&);
	virtual void _makeFlySound(void);
	virtual void pushOutOfBlocks(Vec3<float> const&);
	virtual void spawnTrailBubbles(void);
	virtual void updateInsideBlock(void);
	virtual void _onSizeUpdated(void);
	virtual __int64 _doAutoAttackOnTouch(Actor&);
};